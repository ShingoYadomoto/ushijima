// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"gopkg.in/guregu/null.v3"
)

// PaymentUser represents a row from 'public.payment_user'.
type PaymentUser struct {
	ID         int         `json:"id"`          // id
	PaymentID  null.Int    `json:"payment_id"`  // payment_id
	UserID     null.Int    `json:"user_id"`     // user_id
	Name       null.String `json:"name"`        // name
	CreateDate null.Time   `json:"create_date"` // create_date
	UpdateDate null.Time   `json:"update_date"` // update_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PaymentUser exists in the database.
func (pu *PaymentUser) Exists() bool {
	return pu._exists
}

// Deleted provides information if the PaymentUser has been deleted from the database.
func (pu *PaymentUser) Deleted() bool {
	return pu._deleted
}

// Insert inserts the PaymentUser to the database.
func (pu *PaymentUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.payment_user (` +
		`payment_id, user_id, name, create_date, update_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, pu.PaymentID, pu.UserID, pu.Name, pu.CreateDate, pu.UpdateDate)
	err = db.QueryRow(sqlstr, pu.PaymentID, pu.UserID, pu.Name, pu.CreateDate, pu.UpdateDate).Scan(&pu.ID)
	if err != nil {
		return err
	}

	// set existence
	pu._exists = true

	return nil
}

// Update updates the PaymentUser in the database.
func (pu *PaymentUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.payment_user SET (` +
		`payment_id, user_id, name, create_date, update_date` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, pu.PaymentID, pu.UserID, pu.Name, pu.CreateDate, pu.UpdateDate, pu.ID)
	_, err = db.Exec(sqlstr, pu.PaymentID, pu.UserID, pu.Name, pu.CreateDate, pu.UpdateDate, pu.ID)
	return err
}

// Save saves the PaymentUser to the database.
func (pu *PaymentUser) Save(db XODB) error {
	if pu.Exists() {
		return pu.Update(db)
	}

	return pu.Insert(db)
}

// Upsert performs an upsert for PaymentUser.
//
// NOTE: PostgreSQL 9.5+ only
func (pu *PaymentUser) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if pu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.payment_user (` +
		`id, payment_id, user_id, name, create_date, update_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, payment_id, user_id, name, create_date, update_date` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.payment_id, EXCLUDED.user_id, EXCLUDED.name, EXCLUDED.create_date, EXCLUDED.update_date` +
		`)`

	// run query
	XOLog(sqlstr, pu.ID, pu.PaymentID, pu.UserID, pu.Name, pu.CreateDate, pu.UpdateDate)
	_, err = db.Exec(sqlstr, pu.ID, pu.PaymentID, pu.UserID, pu.Name, pu.CreateDate, pu.UpdateDate)
	if err != nil {
		return err
	}

	// set existence
	pu._exists = true

	return nil
}

// Delete deletes the PaymentUser from the database.
func (pu *PaymentUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pu._exists {
		return nil
	}

	// if deleted, bail
	if pu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.payment_user WHERE id = $1`

	// run query
	XOLog(sqlstr, pu.ID)
	_, err = db.Exec(sqlstr, pu.ID)
	if err != nil {
		return err
	}

	// set deleted
	pu._deleted = true

	return nil
}

// Payment returns the Payment associated with the PaymentUser's PaymentID (payment_id).
//
// Generated from foreign key 'payment_user_payment_id_fkey'.
func (pu *PaymentUser) Payment(db XODB) (*Payment, error) {
	return PaymentByID(db, int(pu.PaymentID.Int64))
}

// User returns the User associated with the PaymentUser's UserID (user_id).
//
// Generated from foreign key 'payment_user_user_id_fkey'.
func (pu *PaymentUser) User(db XODB) (*User, error) {
	return UserByID(db, int(pu.UserID.Int64))
}

// PaymentUserByID retrieves a row from 'public.payment_user' as a PaymentUser.
//
// Generated from index 'payment_user_pkey'.
func PaymentUserByID(db XODB, id int) (*PaymentUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, payment_id, user_id, name, create_date, update_date ` +
		`FROM public.payment_user ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	pu := PaymentUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pu.ID, &pu.PaymentID, &pu.UserID, &pu.Name, &pu.CreateDate, &pu.UpdateDate)
	if err != nil {
		return nil, err
	}

	return &pu, nil
}
