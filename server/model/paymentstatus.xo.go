// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"gopkg.in/guregu/null.v3"
)

// PaymentStatus represents a row from 'public.payment_statuses'.
type PaymentStatus struct {
	ID         int         `json:"id"`          // id
	Name       null.String `json:"name"`        // name
	Display    null.String `json:"display"`     // display
	CreateDate null.Time   `json:"create_date"` // create_date
	UpdateDate null.Time   `json:"update_date"` // update_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PaymentStatus exists in the database.
func (ps *PaymentStatus) Exists() bool {
	return ps._exists
}

// Deleted provides information if the PaymentStatus has been deleted from the database.
func (ps *PaymentStatus) Deleted() bool {
	return ps._deleted
}

// Insert inserts the PaymentStatus to the database.
func (ps *PaymentStatus) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ps._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.payment_statuses (` +
		`name, display, create_date, update_date` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ps.Name, ps.Display, ps.CreateDate, ps.UpdateDate)
	err = db.QueryRow(sqlstr, ps.Name, ps.Display, ps.CreateDate, ps.UpdateDate).Scan(&ps.ID)
	if err != nil {
		return err
	}

	// set existence
	ps._exists = true

	return nil
}

// Update updates the PaymentStatus in the database.
func (ps *PaymentStatus) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ps._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ps._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.payment_statuses SET (` +
		`name, display, create_date, update_date` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, ps.Name, ps.Display, ps.CreateDate, ps.UpdateDate, ps.ID)
	_, err = db.Exec(sqlstr, ps.Name, ps.Display, ps.CreateDate, ps.UpdateDate, ps.ID)
	return err
}

// Save saves the PaymentStatus to the database.
func (ps *PaymentStatus) Save(db XODB) error {
	if ps.Exists() {
		return ps.Update(db)
	}

	return ps.Insert(db)
}

// Upsert performs an upsert for PaymentStatus.
//
// NOTE: PostgreSQL 9.5+ only
func (ps *PaymentStatus) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ps._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.payment_statuses (` +
		`id, name, display, create_date, update_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, display, create_date, update_date` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.display, EXCLUDED.create_date, EXCLUDED.update_date` +
		`)`

	// run query
	XOLog(sqlstr, ps.ID, ps.Name, ps.Display, ps.CreateDate, ps.UpdateDate)
	_, err = db.Exec(sqlstr, ps.ID, ps.Name, ps.Display, ps.CreateDate, ps.UpdateDate)
	if err != nil {
		return err
	}

	// set existence
	ps._exists = true

	return nil
}

// Delete deletes the PaymentStatus from the database.
func (ps *PaymentStatus) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ps._exists {
		return nil
	}

	// if deleted, bail
	if ps._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.payment_statuses WHERE id = $1`

	// run query
	XOLog(sqlstr, ps.ID)
	_, err = db.Exec(sqlstr, ps.ID)
	if err != nil {
		return err
	}

	// set deleted
	ps._deleted = true

	return nil
}

// PaymentStatusByID retrieves a row from 'public.payment_statuses' as a PaymentStatus.
//
// Generated from index 'payment_statuses_pkey'.
func PaymentStatusByID(db XODB, id int) (*PaymentStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display, create_date, update_date ` +
		`FROM public.payment_statuses ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ps := PaymentStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ps.ID, &ps.Name, &ps.Display, &ps.CreateDate, &ps.UpdateDate)
	if err != nil {
		return nil, err
	}

	return &ps, nil
}
