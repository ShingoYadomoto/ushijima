// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"gopkg.in/guregu/null.v3"
)

// PaymentSummary represents a row from 'public.payment_summaries'.
type PaymentSummary struct {
	ID              int       `json:"id"`                // id
	PaymentStatusID null.Int  `json:"payment_status_id"` // payment_status_id
	MonthID         null.Int  `json:"month_id"`          // month_id
	Amount          null.Int  `json:"amount"`            // amount
	CreateDate      null.Time `json:"create_date"`       // create_date
	UpdateDate      null.Time `json:"update_date"`       // update_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PaymentSummary exists in the database.
func (ps *PaymentSummary) Exists() bool {
	return ps._exists
}

// Deleted provides information if the PaymentSummary has been deleted from the database.
func (ps *PaymentSummary) Deleted() bool {
	return ps._deleted
}

// Insert inserts the PaymentSummary to the database.
func (ps *PaymentSummary) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ps._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.payment_summaries (` +
		`payment_status_id, month_id, amount, create_date, update_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ps.PaymentStatusID, ps.MonthID, ps.Amount, ps.CreateDate, ps.UpdateDate)
	err = db.QueryRow(sqlstr, ps.PaymentStatusID, ps.MonthID, ps.Amount, ps.CreateDate, ps.UpdateDate).Scan(&ps.ID)
	if err != nil {
		return err
	}

	// set existence
	ps._exists = true

	return nil
}

// Update updates the PaymentSummary in the database.
func (ps *PaymentSummary) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ps._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ps._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.payment_summaries SET (` +
		`payment_status_id, month_id, amount, create_date, update_date` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, ps.PaymentStatusID, ps.MonthID, ps.Amount, ps.CreateDate, ps.UpdateDate, ps.ID)
	_, err = db.Exec(sqlstr, ps.PaymentStatusID, ps.MonthID, ps.Amount, ps.CreateDate, ps.UpdateDate, ps.ID)
	return err
}

// Save saves the PaymentSummary to the database.
func (ps *PaymentSummary) Save(db XODB) error {
	if ps.Exists() {
		return ps.Update(db)
	}

	return ps.Insert(db)
}

// Upsert performs an upsert for PaymentSummary.
//
// NOTE: PostgreSQL 9.5+ only
func (ps *PaymentSummary) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ps._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.payment_summaries (` +
		`id, payment_status_id, month_id, amount, create_date, update_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, payment_status_id, month_id, amount, create_date, update_date` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.payment_status_id, EXCLUDED.month_id, EXCLUDED.amount, EXCLUDED.create_date, EXCLUDED.update_date` +
		`)`

	// run query
	XOLog(sqlstr, ps.ID, ps.PaymentStatusID, ps.MonthID, ps.Amount, ps.CreateDate, ps.UpdateDate)
	_, err = db.Exec(sqlstr, ps.ID, ps.PaymentStatusID, ps.MonthID, ps.Amount, ps.CreateDate, ps.UpdateDate)
	if err != nil {
		return err
	}

	// set existence
	ps._exists = true

	return nil
}

// Delete deletes the PaymentSummary from the database.
func (ps *PaymentSummary) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ps._exists {
		return nil
	}

	// if deleted, bail
	if ps._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.payment_summaries WHERE id = $1`

	// run query
	XOLog(sqlstr, ps.ID)
	_, err = db.Exec(sqlstr, ps.ID)
	if err != nil {
		return err
	}

	// set deleted
	ps._deleted = true

	return nil
}

// Month returns the Month associated with the PaymentSummary's MonthID (month_id).
//
// Generated from foreign key 'payment_summaries_month_id_fkey'.
func (ps *PaymentSummary) Month(db XODB) (*Month, error) {
	return MonthByID(db, int(ps.MonthID.Int64))
}

// PaymentStatus returns the PaymentStatus associated with the PaymentSummary's PaymentStatusID (payment_status_id).
//
// Generated from foreign key 'payment_summaries_payment_status_id_fkey'.
func (ps *PaymentSummary) PaymentStatus(db XODB) (*PaymentStatus, error) {
	return PaymentStatusByID(db, int(ps.PaymentStatusID.Int64))
}

// PaymentSummaryByID retrieves a row from 'public.payment_summaries' as a PaymentSummary.
//
// Generated from index 'payment_summaries_pkey'.
func PaymentSummaryByID(db XODB, id int) (*PaymentSummary, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, payment_status_id, month_id, amount, create_date, update_date ` +
		`FROM public.payment_summaries ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ps := PaymentSummary{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ps.ID, &ps.PaymentStatusID, &ps.MonthID, &ps.Amount, &ps.CreateDate, &ps.UpdateDate)
	if err != nil {
		return nil, err
	}

	return &ps, nil
}
